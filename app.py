# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18JqwLZtXzGM-9pmHnl_pMr56Ef27dC9A

#Streamlit
"""

# app.py
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from prophet import Prophet
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
import seaborn as sns

st.set_page_config(page_title="Leastric Dashboard", layout="wide")
st.title("🔌 Leastric - Energy Monitoring")

# Upload & dummy data toggle
uploaded_file = st.sidebar.file_uploader("📂 Upload file CSV", type=["csv"])
use_dummy = st.sidebar.checkbox("Gunakan dummy data (demo)", value=False)

@st.cache_data
def load_data(file):
    df = pd.read_csv(file, parse_dates=["timestamp"])
    df['date'] = df['timestamp'].dt.date
    return df

# Load data
df = None
if uploaded_file:
    df = load_data(uploaded_file)
    st.success("✅ Data berhasil dimuat dari upload.")
elif use_dummy:
    try:
        df = load_data("data/dummy_energy.csv")
        st.warning("⚠️ Menampilkan data dummy (dummy_energy.csv)")
    except FileNotFoundError:
        st.error("🚫 File dummy_energy.csv tidak ditemukan.")

# Dashboard jika ada data
if df is not None:
    # ===================== Konsumsi Harian =====================
    st.subheader("📈 Total Konsumsi per Hari")
    daily_total = df.groupby("date")["power_usage_watt"].sum()
    fig, ax = plt.subplots(figsize=(10, 5))
    daily_total.index = pd.to_datetime(daily_total.index)
    daily_total.plot(kind="line", ax=ax, marker="o")
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%b %d'))
    ax.xaxis.set_major_locator(mdates.DayLocator(interval=1))
    plt.xticks(rotation=45)
    ax.set_ylabel("Total Power (Watt)")
    ax.set_xlabel("Tanggal")
    ax.set_title("Total Konsumsi Listrik Harian")
    plt.tight_layout()
    st.pyplot(fig)

    # Insight tertinggi
    top_day = daily_total.idxmax()
    top_val = daily_total.max()
    st.info(f"📌 Konsumsi tertinggi: **{top_day.strftime('%d %B %Y')}** sebesar **{top_val:.2f} Watt**")

    # ===================== Forecasting =====================
    st.subheader("🔮 Prediksi Konsumsi Listrik (7 Hari ke Depan)")
    prophet_df = df.groupby(df['timestamp'].dt.date)["power_usage_watt"].sum().reset_index()
    prophet_df.columns = ["ds", "y"]
    prophet_df["ds"] = pd.to_datetime(prophet_df["ds"])  # fix format
    model = Prophet()
    model.fit(prophet_df)
    future = model.make_future_dataframe(periods=7)
    forecast = model.predict(future)

      # Simpan forecasting sebagai CSV
    forecast_result = forecast[["ds", "yhat"]]
    csv_forecast = forecast_result.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="⬇️ Download Hasil Forecasting (7 Hari ke Depan)",
        data=csv_forecast,
        file_name="forecast.csv",
        mime="text/csv"
    )

    # Plot
    forecast_plot = forecast[["ds", "yhat"]].set_index("ds")[-14:]
    fig2, ax2 = plt.subplots(figsize=(10, 5))
    forecast_plot.plot(ax=ax2, marker='o')
    ax2.set_ylabel("Prediksi Power (Watt)")
    ax2.set_xlabel("Tanggal")
    ax2.set_title("Forecast Konsumsi Listrik Harian")
    plt.xticks(rotation=45)
    plt.tight_layout()
    st.pyplot(fig2)

    # MAE
    merged = prophet_df.merge(forecast[["ds", "yhat"]], on="ds", how="left")
    mae = mean_absolute_error(merged["y"], merged["yhat"])
    st.metric("📊 MAE Forecasting", f"{mae:.2f} Watt")

    # ===================== Clustering =====================
    st.subheader("🧠 Device Pattern Recognition (Clustering)")
    cluster_df = df.copy()
    cluster_df["hour"] = cluster_df["timestamp"].dt.hour
    agg = cluster_df.groupby("hour")["power_usage_watt"].agg(["mean", "max", "min"]).reset_index()
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(agg[["mean", "max", "min"]])
    kmeans = KMeans(n_clusters=3, random_state=42, n_init="auto")
    agg["cluster"] = kmeans.fit_predict(X_scaled)

    # Visualisasi
    fig3, ax3 = plt.subplots(figsize=(10, 5))
    sns.lineplot(data=agg, x="hour", y="mean", hue="cluster", palette="tab10", marker="o", ax=ax3)
    ax3.set_title("Cluster Pola Konsumsi Listrik per Jam")
    ax3.set_ylabel("Rata-rata Konsumsi (Watt)")
    ax3.set_xlabel("Jam (0-23)")
    st.pyplot(fig3)

    # Simpan hasil clustering ke file CSV
    agg.to_csv("clustered_devices.csv", index=False)
    st.success("📁 Hasil clustering disimpan sebagai `clustered_devices.csv`")

      # Tombol download file hasil clustering
    csv = agg.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="⬇️ Download Hasil Clustering",
        data=csv,
        file_name="clustered_devices.csv",
        mime="text/csv"
    )

    st.markdown("📌 *Cluster dapat diinterpretasikan sebagai pola konsumsi perangkat, misalnya:*")
    st.markdown("- **Cluster 0:** Penggunaan tinggi (mungkin AC, oven, dsb.)")
    st.markdown("- **Cluster 1:** Penggunaan sedang (TV, kulkas)")
    st.markdown("- **Cluster 2:** Penggunaan rendah / idle (lampu LED, charger)")

else:
    st.markdown("""
    ## 👋 Selamat datang di **Leastric**
    Solusi monitoring konsumsi listrik harian berbasis data.

    ⚡ Upload file CSV konsumsi listrik untuk:
    - Visualisasi konsumsi harian
    - Prediksi beban listrik 7 hari ke depan
    - Pengenalan pola penggunaan perangkat (clustering)

    📁 Gunakan sidebar untuk mengunggah data atau aktifkan *dummy data*.
    """)

# Footer
st.markdown("""
---
© 2025 Leastric by Ivan ⚡ | Dibuat untuk SheHacks x IDCamp Challenge
""")